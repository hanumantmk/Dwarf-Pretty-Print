#!/usr/bin/perl -w

use strict;

use Getopt::Long;

use DwarfParser::DIE::Struct;
use DwarfParser::DIE::BaseType;
use DwarfParser::DIE::PointerType;
use DwarfParser::DIE::Typedef;
use DwarfParser::DIE::Array;
use DwarfParser::DIE::Subroutine;

my @names;
my @sincludes;
my @lincludes;
GetOptions(
  'names=s'              => \@names,
  'si|system_includes=s' => \@sincludes,
  'li|local_includes=s'  => \@lincludes,
);

unshift @sincludes, "stdio.h";
push @lincludes, "utstring.h";

my %names; #strings
my %types; #numbers

my @objects = @ARGV;

open my $dwarf_syms, "dwarfdump -di @objects |" or die "Couldn't open pipe to dwarfdump: $!";

use constant JUMP_TABLE => {
  'structure_type'   => \&handle_struct,
  'member'           => \&handle_struct_member,
  'base_type'        => \&handle_base_type,
  'pointer_type'     => \&handle_pointer_type,
  'typedef'          => \&handle_typedef,
  'array_type'       => \&handle_array,
  'subrange_type'    => \&handle_subrange,
  'subroutine_type'  => \&handle_subroutine,
  'formal_parameter' => \&handle_parameter,
};

my $last_type;
my $last_scope = 0;
TOP: while (my $line = <$dwarf_syms>) {
  next unless ($line =~ /^<\d+>/);

  $line =~ s/^<(.+?)><(.+?)><(.+?)> //;

  my ($scope, $id, $type) = ($1, $2, $3);

  $scope ||= 0;

  if ($last_scope > $scope) {
    undef($last_type);
  }

  $id or next;

  $id =~ s/^0x0*//;

  $type =~ s/^DW_TAG_//;

  my %params;

  my $old_line = '';
  while ($line) {
    next TOP if ($old_line eq $line);
    $old_line = $line;

    $line =~ s/^DW_AT_(.+?)<(.+?)>\s+//;

    my ($key, $value) = ($1, $2);

    $params{$key} = $value;
  }

  if ($params{name}) {
    $params{name} =~ s/"//g;
    $params{name} =~ s/ /__/g;
  }

  if ($params{type}) {
    $params{type} =~ /^<(.+?)>$/;
    $params{type} = $1;
    $params{type} =~ s/^0x0*//;
  }

  if ($params{byte_size}) {
    $params{byte_size} =~ s/^0x0*//;
  }

  if (JUMP_TABLE->{$type}) {
    JUMP_TABLE->{$type}->($id, \%params);
  }

  $last_scope = $scope;
}

if (@names) {
  my %reduced_names = map { $_, $names{$_} } @names;
  %names = %reduced_names;
}

my %deduped_types = map { $_->{id}, $_ } map { $types{$_}->children(\%types, {}) } values %names;
%types = %deduped_types;

print join('', map { "#include <$_>\n" } @sincludes);
print join('', map { "#include \"$_\"\n" } @lincludes);

print "\n\n// PROTOTYPES\n";
foreach my $type (grep { $_->can('pp_proto') } values %types) {
  print $type->pp_proto(\%types) . ";\n";
}

print "\n\n// PRETTY PRINTERS\n";
foreach my $type (grep { $_->can('pp_fun') } values %types) {
  print $type->pp_fun(\%types) . "\n";
}

print "\n\n// EXTERNAL\n";
foreach my $type (map { $types{$_} } values %names) {
  print $type->pp_wrap_human(\%types) . "\n";
}

sub handle_struct {
  my ($id, $params) = @_;

  my $name = $params->{name};

  $names{$name} = $id if $name;
  $last_type = $types{$id} = DwarfParser::DIE::Struct->new($id, $name);
}

sub handle_struct_member {
  my ($id, $params) = @_;

  my $name = $params->{name};

  $last_type->add_member($name, $params->{type});
}

sub handle_base_type {
  my ($id, $params) = @_;

  my $name      = $params->{name};
  my $encoding  = $params->{encoding};
  my $byte_size = $params->{byte_size};

  $encoding =~ s/^DW_ATE_//;

  $names{$name} = $id if $name;
  $types{$id} = DwarfParser::DIE::BaseType->new($id, $name, $encoding, $byte_size);
}

sub handle_pointer_type {
  my ($id, $params) = @_;

  $types{$id} = DwarfParser::DIE::PointerType->new($id, $params->{type}, $params->{byte_size});
}

sub handle_typedef {
  my ($id, $params) = @_;

  my $name = $params->{name};

  $names{$name} = $id;
  $types{$id} = DwarfParser::DIE::Typedef->new($id, $name, $params->{type});
}

sub handle_array {
  my ($id, $params) = @_;

  $last_type = $types{$id} = DwarfParser::DIE::Array->new($id, $params->{type});
}

sub handle_subrange {
  my ($id, $params) = @_;

  my $upper_bound = $params->{upper_bound};

  $last_type->{size} = $upper_bound + 1;
}

sub handle_subroutine {
  my ($id, $params) = @_;

  $last_type = $types{$id} = DwarfParser::DIE::Subroutine->new($id, $params->{type});
}

sub handle_parameter {
  my ($id, $params) = @_;

  push @{$last_type->{params}}, $params->{type};
}
